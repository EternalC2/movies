rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource and the resource exists.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
    }

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'user_abc' can create their profile if request.auth.uid == 'user_abc'.
     * @allow (get) User 'user_abc' can read their profile if request.auth.uid == 'user_abc'.
     * @allow (update) User 'user_abc' can update their profile if request.auth.uid == 'user_abc'.
     * @allow (delete) User 'user_abc' can delete their profile if request.auth.uid == 'user_abc'.
     * @deny (create) User 'user_xyz' cannot create a profile for 'user_abc'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) User 'user_abc' can add a movie to their favorites.
     * @allow (get) User 'user_abc' can read their favorite movie.
     * @allow (update) User 'user_abc' can update their favorite movie.
     * @allow (delete) User 'user_abc' can remove a movie from their favorites.
     * @deny (create) User 'user_xyz' cannot add a movie to 'user_abc' favorites.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) User 'user_abc' can add a series to their favorites.
     * @allow (get) User 'user_abc' can read their favorite series.
     * @allow (update) User 'user_abc' can update their favorite series.
     * @allow (delete) User 'user_abc' can remove a series from their favorites.
     * @deny (create) User 'user_xyz' cannot add a series to 'user_abc' favorites.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces access control for user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) User 'user_abc' can create their watch progress.
     * @allow (get) User 'user_abc' can read their watch progress.
     * @allow (update) User 'user_abc' can update their watch progress.
     * @allow (delete) User 'user_abc' can delete their watch progress.
     * @deny (create) User 'user_xyz' cannot create watch progress for 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to movie data, but restricts writes.
     * @path /movies/{movieId}
     * @allow (get) Any user can read movie data.
     * @allow (list) Any user can list movie data.
     * @deny (create) No user can create movie data directly.
     * @deny (update) No user can update movie data directly.
     * @deny (delete) No user can delete movie data directly.
     * @principle Allows public read with owner-only writes (simulated with `false` for prototyping).
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account validation
      allow update: if false; // TODO: Add service account validation
      allow delete: if false; // TODO: Add service account validation
    }

    /**
     * @description Allows public read access to series data, but restricts writes.
     * @path /series/{seriesId}
     * @allow (get) Any user can read series data.
     * @allow (list) Any user can list series data.
     * @deny (create) No user can create series data directly.
     * @deny (update) No user can update series data directly.
     * @deny (delete) No user can delete series data directly.
     * @principle Allows public read with owner-only writes (simulated with `false` for prototyping).
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account validation
      allow update: if false; // TODO: Add service account validation
      allow delete: if false; // TODO: Add service account validation
    }

    /**
     * @description Allows public read access to genre data, but restricts writes.
     * @path /genres/{genreId}
     * @allow (get) Any user can read genre data.
     * @allow (list) Any user can list genre data.
     * @deny (create) No user can create genre data directly.
     * @deny (update) No user can update genre data directly.
     * @deny (delete) No user can delete genre data directly.
     * @principle Allows public read with owner-only writes (simulated with `false` for prototyping).
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account validation
      allow update: if false; // TODO: Add service account validation
      allow delete: if false; // TODO: Add service account validation
    }

    /**
     * @description Allows read access to license keys, but restricts writes to only authorized services.
     * @path /licenses/{licenseKey}
     * @allow (get) Any user can get a license.
     * @allow (list) Any user can list licenses.
     * @deny (create) No user can create licenses directly.
     * @deny (update) No user can update licenses directly.
     * @deny (delete) No user can delete licenses directly.
     * @principle Only authorized services can perform write operations.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account validation
      allow update: if false; // TODO: Add service account validation
      allow delete: if false; // TODO: Add service account validation
    }
  }
}