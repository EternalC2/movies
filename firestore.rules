/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to shared content catalogs.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles and acts as the root for all user-specific data.
 * - `/users/{userId}/favoriteMovies/{movieId}`:  Stores user's favorite movies.
 * - `/users/{userId}/favoriteSeries/{seriesId}`: Stores user's favorite series.
 * - `/users/{userId}/watchProgress/{mediaId}`: Stores user's watch progress.
 * - `/movies/{movieId}`: Stores public movie data, readable by all, writable by authorized services.
 * - `/series/{seriesId}`: Stores public series data, readable by all, writable by authorized services.
 * - `/genres/{genreId}`: Stores public genre data, readable by all, writable by authorized services.
 * - `/licenses/{licenseKey}`: Stores license keys with restricted read and write access.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Movies, series, and genres are publicly readable but only writable by authorized services (currently not implemented in this prototype).
 * - Listing of user subcollections is allowed only for the owning user.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under the `/users/{userId}` path to avoid the need for `get()` calls to authorize access. The `userId` is implicitly the owner of any data under their path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can only access their own profile.
     * @deny (create) - If the authenticated user's ID does not match the userId in the path.
     * @deny (update, delete) - If the authenticated user is not the owner of the document.
     * @principle Enforces document ownership and prevents unauthorized profile access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // For update and delete operations, we need to check if the document exists and the user is the owner
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own favorite movies.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for managing user's favorite movies.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own favorite series.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for managing user's favorite series.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
            allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to a user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create, get, list, update, delete) - Authenticated user can only access their own watch progress.
     * @deny (create, get, list, update, delete) - If the authenticated user is not the owner.
     * @principle Enforces document ownership for managing user's watch progress.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
            allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to movie documents. Publicly readable, writable by authorized services.
     * @path /movies/{movieId}
     * @allow (get, list) - Anyone can read movie data.
     * @deny (create, update, delete) - Only authorized services can modify movie data.
     * @principle Allows public read access to movie data while restricting write access.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account check
      allow update: if false; // TODO: Add service account check
      allow delete: if false; // TODO: Add service account check
    }

    /**
     * @description Controls access to series documents. Publicly readable, writable by authorized services.
     * @path /series/{seriesId}
     * @allow (get, list) - Anyone can read series data.
     * @deny (create, update, delete) - Only authorized services can modify series data.
     * @principle Allows public read access to series data while restricting write access.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account check
      allow update: if false; // TODO: Add service account check
      allow delete: if false; // TODO: Add service account check
    }

    /**
     * @description Controls access to genre documents. Publicly readable, writable by authorized services.
     * @path /genres/{genreId}
     * @allow (get, list) - Anyone can read genre data.
     * @deny (create, update, delete) - Only authorized services can modify genre data.
     * @principle Allows public read access to genre data while restricting write access.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add service account check
      allow update: if false; // TODO: Add service account check
      allow delete: if false; // TODO: Add service account check
    }

     /**
      * @description Controls access to license documents.
      * @path /licenses/{licenseKey}
      * @allow (get) - Anyone can read license data.
      * @deny (create, update, delete) - Only authorized services can modify license data.
      */
     match /licenses/{licenseKey} {
       allow get: if false; // TODO: Review and potentially restrict read access
       allow list: if false; // No listing allowed
       allow create: if false; // TODO: Add service account check
       allow update: if false; // TODO: Add service account check
       allow delete: if false; // TODO: Add service account check
     }
  }
}