/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data while allowing public read access to media catalogs.
 *
 * Data Structure:
 * - User profiles and associated data (favorites, watch progress) are stored under `/users/{userId}`.
 * - Movie, Series, and Genre data are stored in top-level collections (`/movies`, `/series`, `/genres`) and are publicly readable.
 * - Licenses are stored in the `/licenses/{licenseKey}` collection.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under their respective `/users/{userId}` path.
 * - Listing of users is disallowed to prevent enumeration.
 * - Movie, Series, and Genre collections are publicly readable but only writable by backend services (not implemented in this prototype).
 * - Licenses can be read by all, but claiming a license requires a batch write that updates both the user's profile and the license document. This batch write is secured to ensure only the user can claim a license for themselves and that the license is available.
 *
 * Denormalization for Authorization:
 * - The rules rely on the user's `uid` from `request.auth` to match the `{userId}` path parameter.
 * - No external `get()` calls are needed to authorize requests.
 *
 * Structural Segregation:
 * - User-specific data is stored under the `/users/{userId}` path, separate from the public movie and series data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'testUid' can create their own profile.
     * @deny (create) User 'otherUid' cannot create a profile for 'testUid'.
     * @allow (get) User 'testUid' can get their own profile.
     * @deny (get) User 'otherUid' cannot get 'testUid' profile.
     * @allow (update) User 'testUid' can update their own profile.
     * @deny (update) User 'otherUid' cannot update 'testUid' profile.
     * @allow (delete) User 'testUid' can delete their own profile.
     * @deny (delete) User 'otherUid' cannot delete 'testUid' profile.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/favoriteMovies/{movieId} collection.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) User 'testUid' can create a favorite movie in their own profile.
     * @deny (create) User 'otherUid' cannot create a favorite movie in 'testUid' profile.
     * @allow (get) User 'testUid' can get a favorite movie from their own profile.
     * @deny (get) User 'otherUid' cannot get 'testUid' favorite movie.
     * @allow (update) User 'testUid' can update a favorite movie in their own profile.
     * @deny (update) User 'otherUid' cannot update 'testUid' favorite movie.
     * @allow (delete) User 'testUid' can delete a favorite movie from their own profile.
     * @deny (delete) User 'otherUid' cannot delete 'testUid' favorite movie.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/favoriteSeries/{seriesId} collection.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) User 'testUid' can create a favorite series in their own profile.
     * @deny (create) User 'otherUid' cannot create a favorite series in 'testUid' profile.
     * @allow (get) User 'testUid' can get a favorite series from their own profile.
     * @deny (get) User 'otherUid' cannot get 'testUid' favorite series.
     * @allow (update) User 'testUid' can update a favorite series in their own profile.
     * @deny (update) User 'otherUid' cannot update 'testUid' favorite series.
     * @allow (delete) User 'testUid' can delete a favorite series from their own profile.
     * @deny (delete) User 'otherUid' cannot delete 'testUid' favorite series.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/watchProgress/{mediaId} collection.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) User 'testUid' can create watch progress in their own profile.
     * @deny (create) User 'otherUid' cannot create watch progress in 'testUid' profile.
     * @allow (get) User 'testUid' can get watch progress from their own profile.
     * @deny (get) User 'otherUid' cannot get 'testUid' watch progress.
     * @allow (update) User 'testUid' can update watch progress in their own profile.
     * @deny (update) User 'otherUid' cannot update 'testUid' watch progress.
     * @allow (delete) User 'testUid' can delete watch progress from their own profile.
     * @deny (delete) User 'otherUid' cannot delete 'testUid' watch progress.
     * @principle Enforces document ownership for writes and restricts read access to the owner.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for the /movies/{movieId} collection.
     * @path /movies/{movieId}
     * @allow (get) Any user can get movie data.
     * @allow (list) Any user can list movies.
     * @deny (create) No user can create movie data.
     * @deny (update) No user can update movie data.
     * @deny (delete) No user can delete movie data.
     * @principle Allows public read access but restricts write access.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /series/{seriesId} collection.
     * @path /series/{seriesId}
     * @allow (get) Any user can get series data.
     * @allow (list) Any user can list series.
     * @deny (create) No user can create series data.
     * @deny (update) No user can update series data.
     * @deny (delete) No user can delete series data.
     * @principle Allows public read access but restricts write access.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /genres/{genreId} collection.
     * @path /genres/{genreId}
     * @allow (get) Any user can get genre data.
     * @allow (list) Any user can list genres.
     * @deny (create) No user can create genre data.
     * @deny (update) No user can update genre data.
     * @deny (delete) No user can delete genre data.
     * @principle Allows public read access but restricts write access.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /licenses/{licenseKey} collection.
     * @path /licenses/{licenseKey}
     * @allow (get) Any user can get license data.
     * @allow (list) Any user can list licenses.
     * @deny (create) No user can create license data.
     * @deny (update) No user can update license data.
     * @deny (delete) No user can delete license data.
     * @principle Allows public read access but restricts write access.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to claim a license by batch writing to their user document and the license document.
     * @path BATCH: /users/{userId} + /licenses/{licenseKey}
     * @allow (write) User 'testUid' can claim a license for themselves.
     * @deny (write) User 'otherUid' cannot claim a license for 'testUid'.
     * @principle Enforces that a user can only claim a license for themselves and that the license is available.
     */
    match /{document=**} {
      allow write: if false;
    }
  }
}