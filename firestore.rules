/**
 * @fileOverview Firestore Security Rules for CineVerse.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data stored
 * under `/users/{userId}`. Public movie and series data is readable by all users,
 * but only writable by authorized services (simulated by `false` in this prototype).
 * License keys can be read and updated by admins.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profiles.
 * - `/users/{userId}/favoriteMovies/{movieId}`: Stores user's favorite movies.
 * - `/users/{userId}/favoriteSeries/{seriesId}`: Stores user's favorite series.
 * - `/users/{userId}/watchProgress/{mediaId}`: Stores user's watch progress.
 * - `/movies/{movieId}`: Stores public movie data.
 * - `/series/{seriesId}`: Stores public series data.
 * - `/genres/{genreId}`: Stores public genre data.
 * - `/licenses/{licenseKey}`: Stores license keys.
 *
 * Key Security Decisions:
 * - Users can only access their own data under `/users/{userId}`.
 * - Public movie, series, and genre data is readable by all.
 * - Writes to public movie and series data are denied.
 *
 * Denormalization for Authorization:
 *  - The current data model does not require denormalization. The paths for
 *    user-specific data inherently tie the data to the user's ID.
 *
 * Structural Segregation:
 *  - User-specific data is stored under `/users/{userId}`, separate from public
 *    movie and series data, to ensure clear ownership and prevent unauthorized
 *    access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile (document ID 'user_abc').
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their own profile (document ID 'user_abc').
     * @deny (create) - User with UID 'user_xyz' cannot create a profile with document ID 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read, update, or delete the profile of user 'user_abc'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their own favorite movies under /users/user_abc/favoriteMovies/{movieId}.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage favorite movies under /users/user_abc/favoriteMovies/{movieId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their own favorite series under /users/user_abc/favoriteSeries/{seriesId}.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage favorite series under /users/user_abc/favoriteSeries/{seriesId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create, get, update, delete) - User with UID 'user_abc' can manage their own watch progress under /users/user_abc/watchProgress/{mediaId}.
     * @deny (create, get, update, delete) - User with UID 'user_xyz' cannot manage watch progress under /users/user_abc/watchProgress/{mediaId}.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to public movie data.
     * @path /movies/{movieId}
     * @allow (get, list) - Any user can read movie data.
     * @deny (create, update, delete) - No user can create, update, or delete movie data (admin only).
     * @principle Public read, restricted write access for admin-managed data.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to public series data.
     * @path /series/{seriesId}
     * @allow (get, list) - Any user can read series data.
     * @deny (create, update, delete) - No user can create, update, or delete series data (admin only).
     * @principle Public read, restricted write access for admin-managed data.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to public genre data.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user can read genre data.
     * @deny (create, update, delete) - No user can create, update, or delete genre data (admin only).
     * @principle Public read, restricted write access for admin-managed data.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
     * @description Controls access to license keys.
     * @path /licenses/{licenseKey}
     * @allow (get, list) - Any user can read license data.
     * @deny (create, update, delete) - No user can create, update, or delete license data (admin only).
     * @principle Public read, restricted write access for admin-managed data.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}