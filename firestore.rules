rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can create their profile.
     * @deny (create) User 'someOtherUserId' cannot create a profile for 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @allow (get, update, delete) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can get, update, and delete their own profile.
     * @deny (get, update, delete) User 'someOtherUserId' cannot get, update, or delete the profile of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @principle Enforces document ownership for writes. Allows owner to read their data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for a user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can add a movie to their favorites.
     * @deny (create) User 'someOtherUserId' cannot add a movie to the favorites of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @allow (get, update, delete) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can get, update, and delete their own favorite movies.
     * @deny (get, update, delete) User 'someOtherUserId' cannot get, update, or delete the favorite movies of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @principle Enforces document ownership for writes. Allows owner to read their data.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for a user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can add a series to their favorites.
     * @deny (create) User 'someOtherUserId' cannot add a series to the favorites of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @allow (get, update, delete) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can get, update, and delete their own favorite series.
     * @deny (get, update, or delete) User 'someOtherUserId' cannot get, update, or delete the favorite series of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @principle Enforces document ownership for writes. Allows owner to read their data.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for a user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can create their watch progress.
     * @deny (create) User 'someOtherUserId' cannot create watch progress for 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @allow (get, update, delete) User 'JXSnPO86PCfZIkIimKWwd0wDCgC2' can get, update, and delete their own watch progress.
     * @deny (get, update, delete) User 'someOtherUserId' cannot get, update, or delete the watch progress of 'JXSnPO86PCfZIkIimKWwd0wDCgC2'.
     * @principle Enforces document ownership for writes. Allows owner to read their data.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for movies. Public read, restricted write.
     * @path /movies/{movieId}
     * @allow (get, list) Any user can read movie data.
     * @deny (create, update, delete) No user can create, update, or delete movie data.
     * @principle Public read with owner-only (admin) writes.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once implemented.
      allow update: if false; // TODO: Add admin validation once implemented.
      allow delete: if false; // TODO: Add admin validation once implemented.
    }

    /**
     * @description Rules for series. Public read, restricted write.
     * @path /series/{seriesId}
     * @allow (get, list) Any user can read series data.
     * @deny (create, update, delete) No user can create, update, or delete series data.
     * @principle Public read with owner-only (admin) writes.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once implemented.
      allow update: if false; // TODO: Add admin validation once implemented.
      allow delete: if false; // TODO: Add admin validation once implemented.
    }

    /**
     * @description Rules for genres. Public read, restricted write.
     * @path /genres/{genreId}
     * @allow (get, list) Any user can read genre data.
     * @deny (create, update, delete) No user can create, update, or delete genre data.
     * @principle Public read with owner-only (admin) writes.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once implemented.
      allow update: if false; // TODO: Add admin validation once implemented.
      allow delete: if false; // TODO: Add admin validation once implemented.
    }

    /**
     * @description Rules for licenses. Public read, restricted write.
     * @path /licenses/{licenseKey}
     * @allow (get, list) Any user can read license data.
     * @deny (create, update, delete) No user can create, update, or delete license data.
     * @principle Public read with owner-only (admin) writes.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add admin validation once implemented.
      allow update: if false; // TODO: Add admin validation once implemented.
      allow delete: if false; // TODO: Add admin validation once implemented.
    }
  }
}