/**
 * @fileoverview Firestore Security Rules for CineVerse.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * while allowing public read access to shared content (movies, series, genres).
 * Administrative privileges are not explicitly defined in this prototype.
 *
 * Data Structure:
 * - /users/{userId}: User profiles and settings.
 * - /users/{userId}/favoriteMovies/{movieId}: User's favorite movies.
 * - /users/{userId}/favoriteSeries/{seriesId}: User's favorite series.
 * - /users/{userId}/watchProgress/{mediaId}: User's watch progress.
 * - /movies/{movieId}: Movie metadata (public read, service-only write).
 * - /series/{seriesId}: Series metadata (public read, service-only write).
 * - /genres/{genreId}: Genre metadata (public read, service-only write).
 * - /licenses/{licenseKey}: License key information.
 *
 * Key Security Decisions:
 * - Users can only access their own data under the /users/{userId} path.
 * - Public read access is granted to /movies, /series, and /genres collections.
 * - Write access to /movies, /series, and /genres is not granted in this prototype.
 * - The ruleset does not prevent listing of any collections unless explicitly stated.
 * - Transactions require user and license verification.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user document.
     * @path /users/{userId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces user-ownership for favorite movies.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces user-ownership for favorite series.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows a user to manage their watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (read, write) if request.auth.uid == userId
     * @deny (read, write) if request.auth.uid != userId
     * @principle Enforces user-ownership for watch progress.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to movie metadata. Write access is not granted in this prototype.
     * @path /movies/{movieId}
     * @allow (read) to all users
     * @deny (write) to all users
     * @principle Allows public read access for shared data.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to series metadata. Write access is not granted in this prototype.
     * @path /series/{seriesId}
     * @allow (read) to all users
     * @deny (write) to all users
     * @principle Allows public read access for shared data.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to genre metadata. Write access is not granted in this prototype.
     * @path /genres/{genreId}
     * @allow (read) to all users
     * @deny (write) to all users
     * @principle Allows public read access for shared data.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
    
    /**
     * @description Allows read access to license keys. Write access is restricted.
     * @path /licenses/{licenseKey}
     * @allow get: if true;
     * @deny create, update, delete: if false;
     * @principle Allows public read access for license information.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
      * @description Handles the transaction for activating a license. Requires checking both user and license.
      * @path /TRANSACTION: users/{userId} + licenses/{licenseKey}
      * @allow write if the user exists and owns their document, and the license exists and is available.
      * @deny write if any of the above conditions are false.
      * @principle Ensures that a license can only be claimed by an existing user for an available license.
      */
    // match /TRANSACTION: users/{userId} + licenses/{licenseKey} {
    //     allow write: if (isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)) && exists(/databases/$(database)/documents/licenses/$(licenseKey)));
    //     // TODO: Add owner validation once the schema is updated with an ownership field.
    // }
  }

  // Helper function to determine if the request is from the owner.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the request is from the existing owner of a document.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  // Helper function to check if user is signed in
  function isSignedIn() {
    return request.auth != null;
  }

    // Helper function to check if a document exists.
  function exists(path) {
    return get(path).data != null;
  }
}