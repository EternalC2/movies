/**
 * @fileOverview Firestore Security Rules for CineVerse.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to movie, series, and genre information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information. Access is restricted to the owning user.
 * - /users/{userId}/favoriteMovies/{movieId}: Stores the user's favorite movies. Access is restricted to the owning user.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores the user's favorite series. Access is restricted to the owning user.
 * - /users/{userId}/watchProgress/{mediaId}: Stores the user's watch progress. Access is restricted to the owning user.
 * - /movies/{movieId}: Stores movie data. Publicly readable, writable only by authorized services (not implemented in this prototype).
 * - /series/{seriesId}: Stores series data. Publicly readable, writable only by authorized services (not implemented in this prototype).
 * - /genres/{genreId}: Stores genre data. Publicly readable, writable only by authorized services (not implemented in this prototype).
 * - /licenses/{licenseKey}: Stores license data.
 *
 * Key Security Decisions:
 * - User data is strictly private; only the authenticated user can read or write their own data.
 * - Movie, series, and genre data are publicly readable to facilitate discovery and browsing.
 * - Listing of users is disallowed to protect user privacy.
 * - Write access to movies, series, and genres is not implemented in this prototype, but is intended for authorized services only.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles.  Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching UID.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own profile.
     * @deny (create) - Attempt to create a user profile with a UID that doesn't match the authenticated user's UID.
     * @deny (get, update, delete) - Attempt to read/update/delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the user's favorite movies. Only the authenticated user can manage their own favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) - Authenticated user adds a movie to their favorites.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own favorite movies.
     * @deny (create) - Attempt to add a favorite movie to another user's list.
     * @deny (get, update, delete) - Attempt to read/update/delete another user's favorite movies.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the user's favorite series. Only the authenticated user can manage their own favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) - Authenticated user adds a series to their favorites.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own favorite series.
     * @deny (create) - Attempt to add a favorite series to another user's list.
     * @deny (get, update, delete) - Attempt to read/update/delete another user's favorite series.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure the user's watch progress. Only the authenticated user can manage their own watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) - Authenticated user creates watch progress for a media item.
     * @allow (get, update, delete) - Authenticated user reads/updates/deletes their own watch progress.
     * @deny (create) - Attempt to create watch progress for another user.
     * @deny (get, update, delete) - Attempt to read/update/delete another user's watch progress.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/watchProgress/{mediaId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isExistingOwner(userId);
        allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allow public read access to movie data, with restricted write access.
     * @path /movies/{movieId}
     * @allow (get, list) - Any user can read movie data.
     * @deny (create, update, delete) - No user can create, update, or delete movie data (write access reserved for authorized services).
     * @principle Allows public reads with restricted writes.
     */
    match /movies/{movieId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account validation for write access.
    }

    /**
     * @description Allow public read access to series data, with restricted write access.
     * @path /series/{seriesId}
     * @allow (get, list) - Any user can read series data.
     * @deny (create, update, delete) - No user can create, update, or delete series data (write access reserved for authorized services).
     * @principle Allows public reads with restricted writes.
     */
    match /series/{seriesId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account validation for write access.
    }

    /**
     * @description Allow public read access to genre data, with restricted write access.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user can read genre data.
     * @deny (create, update, delete) - No user can create, update, or delete genre data (write access reserved for authorized services).
     * @principle Allows public reads with restricted writes.
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account validation for write access.
    }

     /**
      * @description Secure License Data
      * @path /licenses/{licenseKey}
      * @allow (read) - Any user can read License data.
      * @deny (write) - No user can create, update, or delete License data
      */
      match /licenses/{licenseKey} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add service account validation for write access.
      }
  }
}