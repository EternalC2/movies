/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and restricts write access to shared data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles and metadata. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/favoriteMovies/{movieId}:  Stores the user's favorite movies. Only the authenticated user can manage their own favorites.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores the user's favorite series. Only the authenticated user can manage their own favorites.
 * - /users/{userId}/watchProgress/{mediaId}: Stores the user's watch progress. Only the authenticated user can manage their own watch progress.
 * - /movies/{movieId}: Stores movie metadata. Publicly readable, but only authorized services can write.
 * - /series/{seriesId}: Stores series metadata. Publicly readable, but only authorized services can write.
 * - /genres/{genreId}: Stores genre metadata. Publicly readable, but only authorized services can write.
 * - /licenses/{licenseKey}: Stores license keys. Currently allows anyone to create, update, or delete licenses, but this should be restricted to admins.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the owning user.
 * - Public data (movies, series, genres) is readable by all.
 * - Write access to public data collections is not yet secured and requires further refinement.
 * - The `licenses` collection currently has overly permissive rules and needs to be secured.
 *
 * Denormalization for Authorization:
 * - User-specific data is nested under `/users/{userId}` to avoid `get()` calls for ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile with matching UID.
     * @deny (create) Authenticated user attempts to create a profile for a different UID.
     * @allow (get) Authenticated user reads their own profile.
     * @deny (get) Authenticated user attempts to read another user's profile.
     * @allow (update) Authenticated user updates their own profile.
     * @deny (update) Authenticated user attempts to update another user's profile.
     * @allow (delete) Authenticated user deletes their own profile.
     * @deny (delete) Authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) Authenticated user creates a favorite movie entry under their own profile.
     * @deny (create) Authenticated user attempts to create a favorite movie entry under another user's profile.
     * @allow (get) Authenticated user reads their own favorite movie entries.
     * @deny (get) Authenticated user attempts to read another user's favorite movie entries.
     * @allow (update) Authenticated user updates their own favorite movie entries.
     * @deny (update) Authenticated user attempts to update another user's favorite movie entries.
     * @allow (delete) Authenticated user deletes their own favorite movie entries.
     * @deny (delete) Authenticated user attempts to delete another user's favorite movie entries.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) Authenticated user creates a favorite series entry under their own profile.
     * @deny (create) Authenticated user attempts to create a favorite series entry under another user's profile.
     * @allow (get) Authenticated user reads their own favorite series entries.
     * @deny (get) Authenticated user attempts to read another user's favorite series entries.
     * @allow (update) Authenticated user updates their own favorite series entries.
     * @deny (update) Authenticated user attempts to update another user's favorite series entries.
     * @allow (delete) Authenticated user deletes their own favorite series entries.
     * @deny (delete) Authenticated user attempts to delete another user's favorite series entries.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) Authenticated user creates a watch progress entry under their own profile.
     * @deny (create) Authenticated user attempts to create a watch progress entry under another user's profile.
     * @allow (get) Authenticated user reads their own watch progress entries.
     * @deny (get) Authenticated user attempts to read another user's watch progress entries.
     * @allow (update) Authenticated user updates their own watch progress entries.
     * @deny (update) Authenticated user attempts to update another user's watch progress entries.
     * @allow (delete) Authenticated user deletes their own watch progress entries.
     * @deny (delete) Authenticated user attempts to delete another user's watch progress entries.
     * @principle Enforces document ownership for all read/write operations.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId);
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to movie metadata, but restricts write access.
     * @path /movies/{movieId}
     * @allow (get, list) Any user can read movie metadata.
     * @deny (create, update, delete) No user can modify movie metadata (requires admin privileges, not yet implemented).
     * @principle Allows public read access but restricts write access to authorized services.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add admin validation
      allow update: if false;  // TODO: Add admin validation
      allow delete: if false;  // TODO: Add admin validation
    }

    /**
     * @description Allows public read access to series metadata, but restricts write access.
     * @path /series/{seriesId}
     * @allow (get, list) Any user can read series metadata.
     * @deny (create, update, delete) No user can modify series metadata (requires admin privileges, not yet implemented).
     * @principle Allows public read access but restricts write access to authorized services.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add admin validation
      allow update: if false;  // TODO: Add admin validation
      allow delete: if false;  // TODO: Add admin validation
    }

    /**
     * @description Allows public read access to genre metadata, but restricts write access.
     * @path /genres/{genreId}
     * @allow (get, list) Any user can read genre metadata.
     * @deny (create, update, delete) No user can modify genre metadata (requires admin privileges, not yet implemented).
     * @principle Allows public read access but restricts write access to authorized services.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;  // TODO: Add admin validation
      allow update: if false;  // TODO: Add admin validation
      allow delete: if false;  // TODO: Add admin validation
    }

     /**
      * @description Allows anyone to create licenses. This should be restricted to admin users only.
      * @path /licenses/{licenseKey}
      * @allow (create) Any authenticated user can create a license. This should be restricted.
      * @allow (get) Any authenticated user can get a license. This might be ok.
      * @allow (update) Any authenticated user can update a license. This should be restricted.
      * @allow (delete) Any authenticated user can delete a license. This should be restricted.
      * @principle The `licenses` collection currently has overly permissive rules and needs to be secured.
      */
    match /licenses/{licenseKey} {
        allow create: if true; // TODO: Restrict to admins
        allow get: if true;
        allow list: if true;
        allow update: if true; // TODO: Restrict to admins
        allow delete: if true; // TODO: Restrict to admins
    }
  }
}