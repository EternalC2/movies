/**
 * @file Firebase Security Rules for CineVerse Firestore.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to shared content. It prioritizes simplicity and performance by denormalizing data where necessary to avoid costly `get()` operations in rules. Write access to core data collections (movies, series, genres) is restricted to authorized services.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles and acts as the root for user-specific data.
 * - /users/{userId}/favoriteMovies/{movieId}: Stores a user's favorite movies.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores a user's favorite series.
 * - /users/{userId}/watchProgress/{mediaId}: Stores a user's watch progress.
 * - /movies/{movieId}: Stores public movie data.
 * - /series/{seriesId}: Stores public series data.
 * - /genres/{genreId}: Stores public genre data.
 * - /licenses/{licenseKey}: Stores license key data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own data under `/users/{userId}`.
 * - Listing of all users is disallowed for privacy.
 * - Movie, Series and Genre data is publicly readable but only writable by authorized services (simulated by `false` in this prototype).
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under the `/users/{userId}` path, removing the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read and modify their profile if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile with ID 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read or modify the profile with ID 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) - User with UID 'user123' can add a movie to their favorites.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, modify, and delete their favorite movies.
     * @deny (create, get, list, update, delete) - User with UID 'user456' cannot modify user123's favorite movies.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) - User with UID 'user123' can add a series to their favorites.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, modify, and delete their favorite series.
     * @deny (create, get, list, update, delete) - User with UID 'user456' cannot modify user123's favorite series.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to a user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) - User with UID 'user123' can create their watch progress.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, modify, and delete their watch progress.
     * @deny (create, get, list, update, delete) - User with UID 'user456' cannot modify user123's watch progress.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to movie data.
     * @path /movies/{movieId}
     * @allow (get, list) - Any user can read movie data.
     * @deny (create, update, delete) - Only authorized services can modify movie data.
     * @principle Allows public read access with restricted writes.
     */
    match /movies/{movieId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to series data.
     * @path /series/{seriesId}
     * @allow (get, list) - Any user can read series data.
     * @deny (create, update, delete) - Only authorized services can modify series data.
     * @principle Allows public read access with restricted writes.
     */
    match /series/{seriesId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to genre data.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user can read genre data.
     * @deny (create, update, delete) - Only authorized services can modify genre data.
     * @principle Allows public read access with restricted writes.
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

       /**
     * @description Controls access to license data.
     * @path /licenses/{licenseKey}
     * @allow (get) - Any user can attempt to read license data.
     * @deny (create, update, delete, list) - No user can create, update, delete or list license data.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list, create, update, delete: if false;
    }
  }
}