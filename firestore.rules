/**
 * @file Firestore Security Rules
 * @description This ruleset prioritizes secure data access based on user roles and data ownership,
 *              while relaxing schema validation for rapid prototyping.
 *
 * Core Philosophy:
 *  - Strict user-ownership model for personal data stored under `/users/{userId}`.
 *  - Public read access for shared movie and series metadata.
 *  - Role-based access control for sensitive operations.
 *
 * Data Structure:
 *  - User profiles stored in `/users/{userId}`.
 *  - User-specific data (favorites, watch progress) stored under the user's document.
 *  - Shared movie and series data stored in top-level `/movies` and `/series` collections.
 *  - Genres stored in top-level `/genres` collection.
 *
 * Key Security Decisions:
 *  - Users can only manage their own profiles and associated data.
 *  - Movie and series data is publicly readable but only writable by authorized services (simulated by `isAdmin()` function).
 *  - License keys are publicly readable but the admin role is required to modify License keys
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under `/users/{userId}` to avoid `get()` calls for authorization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a helper function to check if the user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a helper function to check if the user is the owner of the resource.
     *              This function also checks if the resource exists.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
   /**
     * @description Helper function to check if the user has the 'admin' role.
     * @note This is a placeholder for more robust role management.
     */
    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, and delete their own profile.
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the profile of 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage their favorite movies.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage the favorite movies of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage their favorite series.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage the favorite series of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create, get, list, update, delete) - User with UID 'user_abc' can manage their watch progress.
     * @deny (create, get, list, update, delete) - User with UID 'user_xyz' cannot manage the watch progress of 'user_abc'.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for movies.
     * @path /movies/{movieId}
     * @allow (get, list) - Any user can read movie data.
     * @allow (create, update, delete) - Only admin users can create, update, or delete movie data.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete movie data.
     * @principle Public read access with admin-only writes.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for series.
     * @path /series/{seriesId}
     * @allow (get, list) - Any user can read series data.
     * @allow (create, update, delete) - Only admin users can create, update, or delete series data.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete series data.
     * @principle Public read access with admin-only writes.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Security rules for genres.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user can read genre data.
     * @allow (create, update, delete) - Only admin users can create, update, or delete genre data.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete genre data.
     * @principle Public read access with admin-only writes.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    /**
     * @description Security rules for licenses.
     * @path /licenses/{licenseKey}
     * @allow (get, list) - Any user can read genre data.
     * @allow (create, update, delete) - Only admin users can create, update, or delete license data.
     * @deny (create, update, delete) - Non-admin users cannot create, update, or delete license data.
     * @principle Public read access with admin-only writes.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}