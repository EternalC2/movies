rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId The user ID to compare against the authenticated user ID.
     * @returns {boolean} True if the user IDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User 'alice' with ID 'alice_id' can create her own user document.
     * @deny (create) User 'bob' with ID 'bob_id' cannot create a user document with ID 'alice_id'.
     * @allow (get) User 'alice' with ID 'alice_id' can read her own user document.
     * @deny (get) User 'bob' with ID 'bob_id' cannot read user document 'alice_id'.
     * @deny (list) No one can list user documents.
     * @allow (update) User 'alice' with ID 'alice_id' can update her own user document.
     * @deny (update) User 'bob' with ID 'bob_id' cannot update user document 'alice_id'.
     * @allow (delete) User 'alice' with ID 'alice_id' can delete her own user document.
     * @deny (delete) User 'bob' with ID 'bob_id' cannot delete user document 'alice_id'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/favoriteMovies/{movieId} collection.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) User 'alice' with ID 'alice_id' can create a favorite movie with ID 'movie_123' in her own collection.
     * @deny (create) User 'bob' with ID 'bob_id' cannot create a favorite movie in 'alice_id's collection.
     * @allow (get) User 'alice' with ID 'alice_id' can read her favorite movie with ID 'movie_123' in her own collection.
     * @deny (get) User 'bob' with ID 'bob_id' cannot read favorite movie in 'alice_id's collection.
     * @allow (list) User 'alice' with ID 'alice_id' can list favorite movies in her own collection.
     * @deny (list) User 'bob' with ID 'bob_id' cannot list favorite movies in 'alice_id's collection.
     * @allow (update) User 'alice' with ID 'alice_id' can update her favorite movie with ID 'movie_123' in her own collection.
     * @deny (update) User 'bob' with ID 'bob_id' cannot update favorite movie in 'alice_id's collection.
     * @allow (delete) User 'alice' with ID 'alice_id' can delete her favorite movie with ID 'movie_123' from her own collection.
     * @deny (delete) User 'bob' with ID 'bob_id' cannot delete favorite movie in 'alice_id's collection.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/favoriteSeries/{seriesId} collection.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) User 'alice' with ID 'alice_id' can create a favorite series with ID 'series_456' in her own collection.
     * @deny (create) User 'bob' with ID 'bob_id' cannot create a favorite series in 'alice_id's collection.
     * @allow (get) User 'alice' with ID 'alice_id' can read her favorite series with ID 'series_456' in her own collection.
     * @deny (get) User 'bob' with ID 'bob_id' cannot read favorite series in 'alice_id's collection.
     * @allow (list) User 'alice' with ID 'alice_id' can list favorite series in her own collection.
     * @deny (list) User 'bob' with ID 'bob_id' cannot list favorite series in 'alice_id's collection.
     * @allow (update) User 'alice' with ID 'alice_id' can update her favorite series with ID 'series_456' in her own collection.
     * @deny (update) User 'bob' with ID 'bob_id' cannot update favorite series in 'alice_id's collection.
     * @allow (delete) User 'alice' with ID 'alice_id' can delete her favorite series with ID 'series_456' from her own collection.
     * @deny (delete) User 'bob' with ID 'bob_id' cannot delete favorite series in 'alice_id's collection.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/watchProgress/{mediaId} collection.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) User 'alice' with ID 'alice_id' can create watch progress for media 'movie_789' in her own collection.
     * @deny (create) User 'bob' with ID 'bob_id' cannot create watch progress in 'alice_id's collection.
     * @allow (get) User 'alice' with ID 'alice_id' can read her watch progress for media 'movie_789' in her own collection.
     * @deny (get) User 'bob' with ID 'bob_id' cannot read watch progress in 'alice_id's collection.
     * @allow (list) User 'alice' with ID 'alice_id' can list watch progress in her own collection.
     * @deny (list) User 'bob' with ID 'bob_id' cannot list watch progress in 'alice_id's collection.
     * @allow (update) User 'alice' with ID 'alice_id' can update her watch progress for media 'movie_789' in her own collection.
     * @deny (update) User 'bob' with ID 'bob_id' cannot update watch progress in 'alice_id's collection.
     * @allow (delete) User 'alice' with ID 'alice_id' can delete her watch progress for media 'movie_789' from her own collection.
     * @deny (delete) User 'bob' with ID 'bob_id' cannot delete watch progress in 'alice_id's collection.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /movies/{movieId} collection.
     * @path /movies/{movieId}
     * @allow (get) Any user can read movie data.
     * @allow (list) Any user can list movies.
     * @deny (create) No one can create movie documents through client rules.
     * @deny (update) No one can update movie documents through client rules.
     * @deny (delete) No one can delete movie documents through client rules.
     * @principle Public read, restricted write access.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /series/{seriesId} collection.
     * @path /series/{seriesId}
     * @allow (get) Any user can read series data.
     * @allow (list) Any user can list series.
     * @deny (create) No one can create series documents through client rules.
     * @deny (update) No one can update series documents through client rules.
     * @deny (delete) No one can delete series documents through client rules.
     * @principle Public read, restricted write access.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /genres/{genreId} collection.
     * @path /genres/{genreId}
     * @allow (get) Any user can read genre data.
     * @allow (list) Any user can list genres.
     * @deny (create) No one can create genre documents through client rules.
     * @deny (update) No one can update genre documents through client rules.
     * @deny (delete) No one can delete genre documents through client rules.
     * @principle Public read, restricted write access.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}