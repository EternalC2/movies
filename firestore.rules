/**
 * @fileOverview Firestore Security Rules for CineVerse.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for personal data while allowing public read access to movie and series metadata.
 * Only authenticated users can access their own data, and data modification is restricted to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/favoriteMovies/{movieId}: Stores a user's favorite movies. Only the authenticated user can manage their own favorites.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores a user's favorite series. Only the authenticated user can manage their own series.
 * - /users/{userId}/watchProgress/{mediaId}: Stores user's watch progress. Only the authenticated user can modify.
 * - /movies/{movieId}: Stores movie metadata. Publicly readable, but only writeable by authorized services (not implemented in this prototype).
 * - /series/{seriesId}: Stores series metadata. Publicly readable, but only writeable by authorized services (not implemented in this prototype).
 * - /genres/{genreId}: Stores genre metadata. Publicly readable, but only writeable by authorized services (not implemented in this prototype).
 * - /licenses/{licenseKey}: Stores license keys. Requires special authorization logic, as implemented below.
 *
 * Key Security Decisions:
 * - Users cannot list all users.
 * - Movie, Series, and Genre collections are publicly readable.
 * - Write access to Movie, Series, and Genre collections is not implemented in this prototype.
 *
 * Denormalization for Authorization:
 *  - User-specific data is nested under the /users/{userId} path, eliminating the need for extra `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     * @param {string} userId - The user ID to compare against.
     * @returns {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Defines a rule to protect user profiles at `/users/{userId}`.
     * @path /users/{userId}
     * @allow (create) - An authenticated user can create their profile if the userId matches their auth UID.
     * @allow (get, update, delete) - An authenticated user can only access, update, or delete their own profile.
     * @deny (create) - An unauthenticated user cannot create a user profile.
     * @deny (update, delete) - An authenticated user cannot modify other user profiles.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules to manage a user's favorite movies at `/users/{userId}/favoriteMovies/{movieId}`.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) - An authenticated user can add movies to their own favorites list.
     * @allow (get, list, update, delete) - An authenticated user can only access, list, update, or delete movies in their own favorites list.
     * @deny (create, update, delete) - An authenticated user cannot modify other user's favorites lists.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules to manage a user's favorite series at `/users/{userId}/favoriteSeries/{seriesId}`.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) - An authenticated user can add series to their own favorites list.
     * @allow (get, list, update, delete) - An authenticated user can only access, list, update, or delete series in their own favorites list.
     * @deny (create, update, delete) - An authenticated user cannot modify other user's favorites lists.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules to manage a user's watch progress at `/users/{userId}/watchProgress/{mediaId}`.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) - An authenticated user can create watch progress records for their own profile.
     * @allow (get, list, update, delete) - An authenticated user can only access, list, update, or delete watch progress records for their own profile.
     * @deny (create, update, delete) - An authenticated user cannot modify other user's watch progress records.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Defines rules for accessing movie metadata at `/movies/{movieId}`.
     * @path /movies/{movieId}
     * @allow (get, list) - All users can read movie metadata.
     * @deny (create, update, delete) - No user can create, update, or delete movie metadata in this prototype.
     * @principle Allows public read access while restricting write access.
     */
    match /movies/{movieId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account validation
    }

    /**
     * @description Defines rules for accessing series metadata at `/series/{seriesId}`.
     * @path /series/{seriesId}
     * @allow (get, list) - All users can read series metadata.
     * @deny (create, update, delete) - No user can create, update, or delete series metadata in this prototype.
     * @principle Allows public read access while restricting write access.
     */
    match /series/{seriesId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account validation
    }

    /**
     * @description Defines rules for accessing genre metadata at `/genres/{genreId}`.
     * @path /genres/{genreId}
     * @allow (get, list) - All users can read genre metadata.
     * @deny (create, update, delete) - No user can create, update, or delete genre metadata in this prototype.
     * @principle Allows public read access while restricting write access.
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create, update, delete: if false;  // TODO: Add service account validation
    }

     /**
      * @description Defines rules for managing licenses at `/licenses/{licenseKey}`.
      * @path /licenses/{licenseKey}
      * @allow (get) - Anyone can get a license.
      * @allow (create) - Only admin can create a license.
      * @allow (update) - Only admin can update a license, but a user can claim a license.
      * @allow (delete) - Only admin can delete a license.
      * @principle Restricts license creation, updates, and deletion to admins, while allowing users to claim licenses.
      */
     match /licenses/{licenseKey} {
        allow get: if true;
        allow create: if false; // TODO: Add Admin Check
        allow update: if (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || (resource.data.status == 'available' && request.resource.data.status.status == 'claimed' && request.resource.data.claimedBy == request.auth.uid));
        allow delete: if false; // TODO: Add Admin Check
    }
  }
}