rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) - Authenticated user can read, update, or delete their own profile.
     * @deny (create) - If the userId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner checks for both ownership and document existence before destructive operations
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own favorite movies.
     * @deny (create, get, list, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner checks for both ownership and document existence before destructive operations
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/favoriteMovies/$(movieId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own favorite series.
     * @deny (create, get, list, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner checks for both ownership and document existence before destructive operations
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/favoriteSeries/$(seriesId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create, get, list, update, delete) - Authenticated user can manage their own watch progress.
     * @deny (create, get, list, update, delete) - If the userId does not match the authenticated user's UID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      //isExistingOwner checks for both ownership and document existence before destructive operations
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId)/watchProgress/$(mediaId));
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to movie documents. Public read, restricted write.
     * @path /movies/{movieId}
     * @allow (get, list) - Any user can read movie data.
     * @deny (create, update, delete) - Only authorized services can modify movie data.
     * @principle Public read with owner-only writes (owner check not yet implemented).
     */
    match /movies/{movieId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account check
    }

    /**
     * @description Controls access to series documents. Public read, restricted write.
     * @path /series/{seriesId}
     * @allow (get, list) - Any user can read series data.
     * @deny (create, update, delete) - Only authorized services can modify series data.
     * @principle Public read with owner-only writes (owner check not yet implemented).
     */
    match /series/{seriesId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account check
    }

    /**
     * @description Controls access to genre documents. Public read, restricted write.
     * @path /genres/{genreId}
     * @allow (get, list) - Any user can read genre data.
     * @deny (create, update, delete) - Only authorized services can modify genre data.
     * @principle Public read with owner-only writes (owner check not yet implemented).
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add service account check
    }

     /**
      * @description Controls access to license documents.
      * @path /licenses/{licenseKey}
      * @allow (create) - Only admins can create license keys.
      * @allow (get) - Any authenticated user can check if a license key exists (for claiming).
      * @deny (list, update, delete) - Listing and deleting licenses is not permitted.
      * @principle Restricts license creation to admins.
      */
    match /licenses/{licenseKey} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isAdmin() {
          return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn() && isAdmin();
        allow update: if false;
        allow delete: if false;
    }
  }
}