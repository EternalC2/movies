/**
 * @file Overview
 * This ruleset enforces a strict user-ownership model for user-specific data (favorites, watch progress) stored under `/users/{userId}`.
 * It also defines public read access for movies, series, and genres, with restricted write access.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can read/write their own profile.
 * - /users/{userId}/favoriteMovies/{movieId}: Stores user's favorite movies. Only the user can manage their own favorites.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores user's favorite series. Only the user can manage their own favorites.
 * - /users/{userId}/watchProgress/{mediaId}: Stores user's watch progress. Only the user can manage their own watch progress.
 * - /movies/{movieId}: Stores public movie data. Publicly readable, writes restricted to authorized services (TODO).
 * - /series/{seriesId}: Stores public series data. Publicly readable, writes restricted to authorized services (TODO).
 * - /genres/{genreId}: Stores public genre data. Publicly readable, writes restricted to authorized services (TODO).
 * - /licenses/{licenseKey}: Stores license keys.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Movies, series, and genres are publicly readable.
 * - Listing all users is disallowed for privacy reasons.
 * - Write access to movies, series, and genres is not yet implemented but will be restricted to authorized services.
 *
 * Denormalization for Authorization:
 * - User ownership is enforced by nesting data under the `/users/{userId}` path, avoiding the need for `get()` calls to verify ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their own profile document.
     * @allow (get) User with UID 'user123' can get their own profile document.
     * @allow (update) User with UID 'user123' can update their own profile document.
     * @allow (delete) User with UID 'user123' can delete their own profile document.
     * @deny (create) User with UID 'user456' cannot create a profile document for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the profile document for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the profile document for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the profile document for user 'user123'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create) User with UID 'user123' can add a movie to their favorites.
     * @allow (get) User with UID 'user123' can get a movie from their favorites.
     * @allow (update) User with UID 'user123' can update a movie in their favorites.
     * @allow (delete) User with UID 'user123' can delete a movie from their favorites.
     * @deny (create) User with UID 'user456' cannot add a movie to 'user123' favorites.
     * @deny (get) User with UID 'user456' cannot get a movie from 'user123' favorites.
     * @deny (update) User with UID 'user456' cannot update a movie in 'user123' favorites.
     * @deny (delete) User with UID 'user456' cannot delete a movie from 'user123' favorites.
     * @principle Enforces document ownership for user's favorite movies.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create) User with UID 'user123' can add a series to their favorites.
     * @allow (get) User with UID 'user123' can get a series from their favorites.
     * @allow (update) User with UID 'user123' can update a series in their favorites.
     * @allow (delete) User with UID 'user123' can delete a series from their favorites.
     * @deny (create) User with UID 'user456' cannot add a series to 'user123' favorites.
     * @deny (get) User with UID 'user456' cannot get a series from 'user123' favorites.
     * @deny (update) User with UID 'user456' cannot update a series in 'user123' favorites.
     * @deny (delete) User with UID 'user456' cannot delete a series from 'user123' favorites.
     * @principle Enforces document ownership for user's favorite series.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create) User with UID 'user123' can create their own watch progress.
     * @allow (get) User with UID 'user123' can get their own watch progress.
     * @allow (update) User with UID 'user123' can update their own watch progress.
     * @allow (delete) User with UID 'user123' can delete their own watch progress.
     * @deny (create) User with UID 'user456' cannot create a watch progress for user 'user123'.
     * @deny (get) User with UID 'user456' cannot get the watch progress for user 'user123'.
     * @deny (update) User with UID 'user456' cannot update the watch progress for user 'user123'.
     * @deny (delete) User with UID 'user456' cannot delete the watch progress for user 'user123'.
     * @principle Enforces document ownership for user's watch progress.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to movie documents. Publicly readable, writes restricted to authorized services.
     * @path /movies/{movieId}
     * @allow (get) Any user can read movie data.
     * @allow (list) Any user can list movies.
     * @deny (create) No one can create movie documents without authorization.
     * @deny (update) No one can update movie documents without authorization.
     * @deny (delete) No one can delete movie documents without authorization.
     * @principle Public read access, restricted write access.
     */
    match /movies/{movieId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorized service check
      allow update: if false; // TODO: Add authorized service check
      allow delete: if false; // TODO: Add authorized service check
    }

    /**
     * @description Controls access to series documents. Publicly readable, writes restricted to authorized services.
     * @path /series/{seriesId}
     * @allow (get) Any user can read series data.
     * @allow (list) Any user can list series.
     * @deny (create) No one can create series documents without authorization.
     * @deny (update) No one can update series documents without authorization.
     * @deny (delete) No one can delete series documents without authorization.
     * @principle Public read access, restricted write access.
     */
    match /series/{seriesId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorized service check
      allow update: if false; // TODO: Add authorized service check
      allow delete: if false; // TODO: Add authorized service check
    }

    /**
     * @description Controls access to genre documents. Publicly readable, writes restricted to authorized services.
     * @path /genres/{genreId}
     * @allow (get) Any user can read genre data.
     * @allow (list) Any user can list genres.
     * @deny (create) No one can create genre documents without authorization.
     * @deny (update) No one can update genre documents without authorization.
     * @deny (delete) No one can delete genre documents without authorization.
     * @principle Public read access, restricted write access.
     */
    match /genres/{genreId} {
      allow get: if true;
      allow list: if true;
      allow create: if false; // TODO: Add authorized service check
      allow update: if false; // TODO: Add authorized service check
      allow delete: if false; // TODO: Add authorized service check
    }

     /**
      * @description Controls access to license documents.
      * @path /licenses/{licenseKey}
      * @allow (get) Any user can read license data.
      * @allow (list) Any user can list licenses.
      * @deny (create) No one can create license documents without authorization.
      * @deny (update) No one can update license documents without authorization.
      * @deny (delete) No one can delete license documents without authorization.
      */
     match /licenses/{licenseKey} {
        allow get: if true;
        allow list: if true;
        allow create: if false; // TODO: Add authorized service check
        allow update: if false; // TODO: Add authorized service check
        allow delete: if false; // TODO: Add authorized service check
     }
  }
}