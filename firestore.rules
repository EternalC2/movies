/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for personal data and restricts write access to shared content.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can read/write their own profile.
 * - /users/{userId}/favoriteMovies/{movieId}: Stores user's favorite movies. Only the user can read/write.
 * - /users/{userId}/favoriteSeries/{seriesId}: Stores user's favorite series. Only the user can read/write.
 * - /users/{userId}/watchProgress/{mediaId}: Stores user's watch progress. Only the user can read/write.
 * - /movies/{movieId}: Stores movie data. Publicly readable, writable by authorized services only (not implemented in this prototype).
 * - /series/{seriesId}: Stores series data. Publicly readable, writable by authorized services only (not implemented in this prototype).
 * - /genres/{genreId}: Stores genre data. Publicly readable, writable by authorized services only (not implemented in this prototype).
 * - /licenses/{licenseKey}: Stores license data. Needs special write rules for activation.
 *
 * Key Security Decisions:
 * - User data is strictly private and only accessible to the owning user.
 * - Generic movie, series, and genre data is publicly readable.
 * - Write access to movies, series, and genres is implicitly denied in this prototype.
 * - Licenses have special update rules.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used in this prototype, but the structure inherently supports it. For instance, favorite movies and series are stored as subcollections under the user, making ownership clear without requiring `get()` calls.
 *
 * Structural Segregation:
 * - User-specific data is stored under the /users/{userId} path, while public data (movies, series, genres) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Requires the user to be signed in to access any data.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-ownership for data access.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the document exists.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces user-ownership and document existence for updates and deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /***************** User Profile Rules *****************/

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) A user can create their own profile if the UID matches the document ID.
     * @allow (get, list, update, delete) A user can read, update, and delete their own profile.
     * @deny (create) A user cannot create a profile with an ID that doesn't match their UID.
     * @deny (get, list, update, delete) A user cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /***************** User Favorite Movies Rules *****************/

    /**
     * @description Controls access to user's favorite movies.
     * @path /users/{userId}/favoriteMovies/{movieId}
     * @allow (create, get, list, update, delete) A user can manage their own favorite movies.
     * @deny (create, get, list, update, delete) A user cannot manage another user's favorite movies.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteMovies/{movieId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***************** User Favorite Series Rules *****************/

    /**
     * @description Controls access to user's favorite series.
     * @path /users/{userId}/favoriteSeries/{seriesId}
     * @allow (create, get, list, update, delete) A user can manage their own favorite series.
     * @deny (create, get, list, update, delete) A user cannot manage another user's favorite series.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/favoriteSeries/{seriesId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***************** User Watch Progress Rules *****************/

    /**
     * @description Controls access to user's watch progress.
     * @path /users/{userId}/watchProgress/{mediaId}
     * @allow (create, get, list, update, delete) A user can manage their own watch progress.
     * @deny (create, get, list, update, delete) A user cannot manage another user's watch progress.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/watchProgress/{mediaId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /***************** Movies Rules *****************/

    /**
     * @description Controls access to movie data.
     * @path /movies/{movieId}
     * @allow (get, list) All users can read movie data.
     * @deny (create, update, delete) No users can modify movie data in this prototype.
     * @principle Public read access with restricted writes.
     */
    match /movies/{movieId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Restrict to authorized services
      allow update: if false;  // TODO: Restrict to authorized services
      allow delete: if false;  // TODO: Restrict to authorized services
    }

    /***************** Series Rules *****************/

    /**
     * @description Controls access to series data.
     * @path /series/{seriesId}
     * @allow (get, list) All users can read series data.
     * @deny (create, update, delete) No users can modify series data in this prototype.
     * @principle Public read access with restricted writes.
     */
    match /series/{seriesId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Restrict to authorized services
      allow update: if false;  // TODO: Restrict to authorized services
      allow delete: if false;  // TODO: Restrict to authorized services
    }

    /***************** Genres Rules *****************/

    /**
     * @description Controls access to genre data.
     * @path /genres/{genreId}
     * @allow (get, list) All users can read genre data.
     * @deny (create, update, delete) No users can modify genre data in this prototype.
     * @principle Public read access with restricted writes.
     */
    match /genres/{genreId} {
      allow get, list: if true;
      allow create: if false;  // TODO: Restrict to authorized services
      allow update: if false;  // TODO: Restrict to authorized services
      allow delete: if false;  // TODO: Restrict to authorized services
    }

    /***************** Licenses Rules *****************/

    /**
     * @description Controls access to license data.
     * @path /licenses/{licenseKey}
     * @allow (get) All users can read license data.
     *
     * @allow (update) A user can claim a license if it is available and the claim matches the user.
     *         This rule enforces that the license can only be claimed once.
     *         Also, the license can only be claimed by the user that matches the id.
     *
     * @deny (create, delete) No users can create or delete license data in this prototype.
     * @principle Public read access with restricted writes for license claiming.
     */
    match /licenses/{licenseKey} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow delete: if false;

        allow update: if (resource.data.status == 'available' &&
                          request.resource.data.status == 'claimed' &&
                          request.resource.data.claimedBy == request.auth.uid &&
                          resource != null);
    }
  }
}